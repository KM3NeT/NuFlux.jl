var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [NuFlux]","category":"page"},{"location":"api/#NuFlux.Flux","page":"API","title":"NuFlux.Flux","text":"Abstract type representing a neutrino flux model.\n\n\n\n\n\n","category":"type"},{"location":"api/#NuFlux.FluxBinInfo","page":"API","title":"NuFlux.FluxBinInfo","text":"FluxBinInfo\n\nA struct representing bin information for a flux table.\n\nFields\n\nCosZenithBin::Tuple{Rational, Rational}: Tuple of (min, max) cosine of the zenith angle for the bin.\nAzimutBin::Tuple{Rational, Rational}: Tuple of (min, max) azimuth angle for the bin.\n\n\n\n\n\n","category":"type"},{"location":"api/#NuFlux.FluxBinInfo-NTuple{4, Any}","page":"API","title":"NuFlux.FluxBinInfo","text":"FluxBinInfo(cosZmin, cosZmax, azimutmin, azimutmax)\n\nConstruct a FluxBinInfo instance from the given bin edges.\n\nArguments\n\ncosZmin: Minimum cosine of the zenith angle.\ncosZmax: Maximum cosine of the zenith angle.\nazimutmin: Minimum azimuth angle.\nazimutmax: Maximum azimuth angle.\n\n\n\n\n\n","category":"method"},{"location":"api/#NuFlux.FluxTable","page":"API","title":"NuFlux.FluxTable","text":"FluxTable\n\nA struct representing a tabulated neutrino flux model.\n\nFields\n\ncoszentihbinedges::Vector{Float64}: Bin edges for the cosine of the zenith angle.\nazimuthbinedges::Vector{Float64}: Bin edges for the azimuth angle.\nenergies::Vector{Float64}: Energy values in GeV.\nparticle::Particle: The particle type (e.g., neutrino or antineutrino).\nflux::Array{Float64, 3}: A 3D array of flux values, indexed by (cosθ, ϕ, energy).\n\n\n\n\n\n","category":"type"},{"location":"api/#NuFlux._getbinindex-Tuple{Any, Any}","page":"API","title":"NuFlux._getbinindex","text":"_getbinindex(binedges, x)\n\nFind the index of the bin that contains the value x.\n\nArguments\n\nbinedges: A vector of bin edges.\nx: The value to find the bin for.\n\nReturns\n\nInt: The index of the bin containing x.\n\n\n\n\n\n","category":"method"},{"location":"api/#NuFlux._getbinmids-Tuple{Any}","page":"API","title":"NuFlux._getbinmids","text":"_getbinmids(binedges)\n\nCalculate the midpoints of bins given their edges.\n\nArguments\n\nbinedges: A vector of bin edges.\n\nReturns\n\nVector{Float64}: A vector of bin midpoints.\n\n\n\n\n\n","category":"method"},{"location":"api/#NuFlux._makerange-Tuple{Any}","page":"API","title":"NuFlux._makerange","text":"_makerange(x)\n\nCreate a range from a vector of values, ensuring constant spacing.\n\nArguments\n\nx: A vector of values.\n\nReturns\n\nStepRangeLen: A range with constant spacing.\n\nThrows\n\nErrorException: If the spacing between values is not constant.\n\n\n\n\n\n","category":"method"},{"location":"api/#NuFlux.flux-Union{Tuple{S}, Tuple{NuFlux.FluxTable, S}} where S<:Real","page":"API","title":"NuFlux.flux","text":"flux(f, energy)\n\n\nArguments\n\nflux:       Flux data \nenergy:     Energy in GeV\ninterpol:   Interpolate the data\n\nReturns\n\nFloat64: The flux value at the given energy.\n\n\n\n\n\n","category":"method"},{"location":"api/#NuFlux.flux-Union{Tuple{T}, Tuple{S}, Tuple{NuFlux.FluxTable, S, T}} where {S, T<:Real}","page":"API","title":"NuFlux.flux","text":"flux(f, energy, cosθ)\n\n\nArguments\n\nflux:       Flux data \nenergy:     Energy in GeV\ncosθ:       Cosine of the zenith angle\ninterpol:   Interpolate the data\n\nReturns\n\nFloat64: The flux value at the given energy and zenith angle.\n\n\n\n\n\n","category":"method"},{"location":"api/#NuFlux.flux-Union{Tuple{U}, Tuple{T}, Tuple{S}, Tuple{NuFlux.FluxTable, S, T, U}} where {S, T, U<:Real}","page":"API","title":"NuFlux.flux","text":"flux(f, energy, cosθ, ϕ)\n\n\nArguments\n\nflux:       Flux data \nenergy:     Energy in GeV\ncosθ:       Cosine of the zenith angle\nϕ:          Azimuth angle\ninterpol:   Interpolate the data\n\nReturns\n\nFloat64: The flux value at the given energy, zenith angle, and azimuth angle.\n\n\n\n\n\n","category":"method"},{"location":"api/#NuFlux.parsefluxbininfo-Tuple{Any}","page":"API","title":"NuFlux.parsefluxbininfo","text":"parsefluxbininfo(line)\n\nParse a line of text into a FluxBinInfo instance.\n\nArguments\n\nline: A string containing bin edge information.\n\nReturns\n\nFluxBinInfo: A struct containing the parsed bin edges.\n\n\n\n\n\n","category":"method"},{"location":"api/#NuFlux.readfluxfile-Tuple{Any}","page":"API","title":"NuFlux.readfluxfile","text":"readfluxfile(io)\n\nRead a flux file and construct a vector of FluxTable instances.\n\nArguments\n\nio: An IO stream or file path to the flux data.\n\nReturns\n\nDict{FluxTable}: A dictionary of FluxTable instances representing the flux data indexed by PDG ID.\n\n\n\n\n\n","category":"method"},{"location":"api/#NuFlux.readfluxfile-Tuple{String}","page":"API","title":"NuFlux.readfluxfile","text":"readfluxfile(filepath::String)\n\nRead a flux file from a file path and construct a vector of FluxTable instances.\n\nArguments\n\nfilepath: Path to the flux data file.\n\nReturns\n\nVector{FluxTable}: A vector of FluxTable instances representing the flux data.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: )","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Dev) (Image: Build Status)","category":"page"},{"location":"#NuFlux.jl","page":"Introduction","title":"NuFlux.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"NuFlux.jl is a package for providing neutrino flux related functionalities  with focus on parsing the flux tables used in \"Atmospheric neutrino flux calculation using the NRLMSISE-00 atmospheric model\" (10.1103/PhysRevD.92.023004)  which are provided under http://www.icrr.u-tokyo.ac.jp/~mhonda/.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To install NuFlux.jl, clone this repo. Then open the Julia REPL as","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia --project=NuFlux.jl","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Next step is to run the following command in the Julia REPL:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg\nPkg.instantiate()","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Then you are good to go to use NuFlux.jl","category":"page"},{"location":"#Example","page":"Introduction","title":"Example","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Here’s a simple example to get started with NuFlux.jl. This example demonstrates how to load a flux table and calculate the flux for a given energy, zenith angle, and azimuth angle.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using NuFlux\n\n# Load a flux table from a file, here we will use one of the default fluxes in the package, but you can use your own\nNUFLUX_PATH = split(Base.pathof(NuFlux), \"src\")[1]\nFLUX_DATA_DIR = joinpath(NUFLUX_PATH, \"data\")\nflux_dict = NuFlux.readfluxfile(joinpath(FLUX_DATA_DIR, \"frj-ally-20-12-solmin.d\"))\n\n# Select a specific flux table (e.g., for muon neutrinos)\nmuon_neutrino_flux = flux_dict[NuFlux.NUMU_PDGID]  # We can use NuFlux defined variables which are just instances of particles from Corpuscles.jl\n\n# Calculate the flux for a given energy, zenith angle, and azimuth angle\nenergy = 10.0  # Energy in GeV\ncosθ = 0.5     # Cosine of the zenith angle\nϕ = 0.0        # Azimuth angle in radians\n\nflux_value = NuFlux.flux(muon_neutrino_flux, energy, cosθ, ϕ; interpol=true)\nprintln(\"Flux value: \", flux_value)","category":"page"}]
}
